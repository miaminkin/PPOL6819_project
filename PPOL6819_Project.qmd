---
title: "PPOL6819_Project"
author: "Mia Minkin, Yash Dhuldhoya, and Jack Gleisberg"
format: html
code-fold: true
embed-resources: true
editor: source
---

# PPOL6819 Final Project / Fall 2023

# Predicting the Impact of the Expanded Child Tax Credit on Voter Turnout in the United States

## Background 

-   **Overview of the federal child tax credit and its expansion under the American Rescue Plan (ARP).** The Child Tax Credit (CTC) is a tax benefit that helps families with the costs of raising children. First signed into law in [1997](https://www.cbpp.org/research/policy-basics-the-child-tax-credit), the CTC has expanded, or increased the benefits of the policy, several times. Most recently, in response to the economic and public health challenges spurred by the COVID-19 pandemic. In 2021, Congress passed the American Rescue Plan Act (ARPA). With passage of the ARPA, the CTC [temporarily increased](https://www.whitehouse.gov/child-tax-credit/) from \$2,000 per child to \$3,000 per child for children over the age of six and \$3,600 for children under the age of six. It also raised the age limit of eligible children from 16 to 17. Details on the specific CTC policies are outlined below.

```{=html}
<!-- -->
```
-   **Income and voter turnout.** While the primary goal of welfare policies like the CTC is to provide relief and increase the economic security of eligible recipients, particularly low-income families, income interacts closely with a wide-variety of social behaviors. Many scholars have found that there is a positive relationship between income and voter turnout. As one's income increases, so to does their likelihood of voting. In 1980, Wolfinger and Rosenstone, found that the effect of income on voter turnout is greater at lower income levels; that once a voter reaches a "modestly comfortable standard of living," the effect of income on voter turnout flattens. This has also been reflected more broadly. For example, the voter turnout rate for individuals in the highest income group exceeds that of lower income levels. The relationship between income and voter turnout is often explored in terms of costs and benefits. Increased barriers and burdens to voting may disproportionally impact lower income populations, such as needing time off to vote, finding child care, and the level of effort or time involved with voter registration.

-   **Hypothesis.** This project explores the impact of expanding the CTC on Presidential voter turnout rate. We hypothesize that when income increases as a result of the expanded CTC, the probability of voter turnout also increases.

## Introduction 

-   **Project Overview.** This project focuses on voter turnout. Specifically, we are interested in the impact of wealth - or income - on an individual's proposensity to vote in a Presidential election. Participating in U.S. elections is a voluntary choice. Yet, it is critical to the functioning of our democratic society. Even though the 2020 Presidential election had one of the highest rates of voter turnout on record, [only 2/3](https://www.census.gov/newsroom/press-releases/2021/2020-presidential-election-voting-and-registration-tables-now-available.html) of eligible voters turned out. Elections, especially Presidential elections, have major implications to lives and livelihoods across the nation. Ensuring there is equal opportunity to participate in elections is a national imperative. Moreover, identifying systematic barriers to voting, such as income, can help produce evidence-based insights that improve access to voting through more targeted interventions (e.g., communications and outreach campaigns). Ultimately, these insights aim to improve election fairness and representation. And while the focus of this project is not specifically on the ARPA's expanded CTC, it may illuminate the positive externalities associated with welfare policies.

-   **Approach** - To test our hypothesis, we leverage a multi-pronged analytic approach. First, we create two microsimulation models to estimate the effect of the CTC on household income. The first microsimulation model calculates the tax benefit for families under the current CTC and the second models the total tax benefit for families under the expanded CTC. We then employ several data pre-processing and cleaning steps necessary to conduct the analysis. This includes re-factoring variables, calculating the shift in probability variables, merging these new data together, creating training and testing splits, setting up cross-fold validation. Next, we use the simulated income data to train several Machine Learning (ML) models to estimate the effect income elasticity on voter turnout. Specifically, we estimate this effect using logistic regression performed on both the expanded CTC and current CTC income.

-   **Data** - This project uses publicly available data from the U.S. Census Bureau's Current Population Survey (CSP). Specifically, we use the following components of the CPS: 1.) the [Annual Social and Economic Supplement (ASEC)](https://www.census.gov/data/datasets/time-series/demo/cps/cps-asec.html) and 2.) [Voting Supplement data](https://www.census.gov/data/datasets/time-series/demo/cps/cps-supp_cps-repwgt/cps-voting.html). The ASEC provides socio-economic data required to simulate the CTC benefits, including income, number of children, age of children, and marital status. The Voting Supplement provides data on key variables such as education, marital status, labor force status, race, income, and whether or not an individual voted.

## Microsimulation Model

**Accounting rules for the Child Tax Credit under the American Rescue Plan Act:**

Maximum credit:

-   \$3000 per qualifying child between ages 6 and 17

-   \$3600 per qualifying child under age 6

Phase-out levels:

1.  The available tax credit is reduced by \$50 for each \$1000 exceeding the income threshold below until the benefit reaches \$2000 / child:

-   \$150,000 for married couples filing a joint return

-   \$75,000 for single filer or married couples filing separate returns

2.  The available tax credit will not be reduced to below \$2000 / child until the household income exceeds the threshold below:

-   \$400,000 for married couples filing a joint return

-   \$200,000 for all other filers

**Assumptions:**

1.  Ignore the first \$75,000 of family income if there is a single parent and ignore the first \$150,000 if there are (2) parents.
2.  Create a maximum benefit of \$3000 for children ages 6 and 17 and \$3600 for children under 6.
3.  Reduce the benefit by \$50 for every \$1000 of income in excess of \$75,000 for single households and the same in excess of \$150,000 for two-parent households until the maximum benefit hits \$2000 / child. (For families with a single parent, the benefit is held constant at \$95,000 - \$200,000. For families with (2) parents, the benefit is held constant at \$170,000 - \$400,000)
4.  Reduce the benefit by \$50 for every \$1000 in excess of \$200,000 for single parent households and in excess of \$400,000 for (2) parent households.

**House-keeping things**

```{r, output = FALSE}
# Loading in packages
library(tidymodels)
library(tidyverse)
library(here)

# Loading in data

asec_2022 <-
  
  read_csv(here("data/asec_individual.csv")) %>% 

  # Subsetting to necessary variables
  
    filter(YEAR == 2022) %>% 
  
  select(
    
    SERIAL,
    FTOTVAL,
    AGE,
    SEX,
    RACE,
    EMPSTAT,
    MARST,
    EDUC,
    NCHILD,
    NCHLT5,
    HWTFINL,
    WTFINL,
    ASECWTH) %>% 
  
  filter(
    !FTOTVAL == "NA",
    !FTOTVAL < 0,
    !AGE < 18,
    !SEX == 9,
    !EMPSTAT == 00,
    !RACE == 999,
    !MARST == 9,
    !EDUC == 999,
    !EDUC == 000,
    !EDUC == 001) %>% 
  
  mutate(
    MARST =
      case_when(
        MARST == 1 ~ 1,
        TRUE ~ 0)) %>% 
  
  rename(
    label = SERIAL,
    hh_income = FTOTVAL,
    sex = SEX,
    marital_status = MARST,
    emp_status = EMPSTAT,
    age = AGE, 
    race = RACE,
    education = EDUC,
    tot_children = NCHILD,
    young_children = NCHLT5) %>% 
  
  mutate(
    old_children = tot_children - young_children) %>% 
  
  distinct(label, .keep_all = TRUE)

```

**Calculator function - ARPA Child Tax Credit**

```{r}

#' Calculating the total child tax credit benefit for families under the American Rescue Plan Act's expanded child tax credit
#'
#' @param hh_income Numeric total of family income in a year
#' @param marital_status Binary variable for if parents are married or not
#' @param old_children Numeric total number of children 6 - 18
#' @param young_children Numeric total number of children under age 6
#'
#' @return Numeric benefit in dollars
#'

arpa_tax_credit <- function(hh_income, marital_status, old_children, young_children){
  
  # Assumption: Maximum income for full benefit = $75,000 if one head of household OR $150,000 if married household
  
  mod_income <- 
    if_else(
      condition = marital_status == 1,
      true = pmax(hh_income - 150000, 0),
      false = pmax(hh_income - 75000, 0))
  
  # Benefit per child
  
  benefit <- 
    
    case_when(
      
      # Married couple, income < 400k, only older children
      marital_status == 1 & hh_income < 400000 & old_children >= 1 & young_children == 0 ~ 
        pmax(2000, (3000 * old_children) - 0.05 * mod_income),
      
      # Married couple, income > 400k, only older children
      marital_status == 1 & hh_income > 400000 & old_children >= 1 & young_children == 0 ~ 
        pmax(0, (3000 * old_children) - 0.05 * mod_income),
      
      # Single household, income < 200k, only older children
      marital_status == 0 & hh_income < 200000 & old_children >= 1 & young_children == 0 ~
        pmax(2000, (3000 * old_children) - 0.05 * mod_income),
      
      # Single household, income > 200k, only older children
      marital_status == 0 & hh_income > 200000 & old_children >= 1 & young_children == 0 ~ 
        pmax(0, (3000 * old_children) - 0.05 * mod_income),
      
      # Married couple, income < 400k, only young children
      marital_status == 1 & hh_income < 400000 & old_children == 0 & young_children >= 1 ~ 
        pmax(2000, (3600 * young_children) - 0.05 * mod_income),
      
      # Married couple, income > 400k, only young children
      marital_status == 1 & hh_income < 400000 & old_children == 0 & young_children >= 1 ~ 
        pmax(0, (3600 * young_children) - 0.05 * mod_income),
      
      # Single household, income < 200k, only young children
      marital_status == 0 & hh_income < 200000 & old_children == 0 & young_children >= 1 ~ 
        pmax(2000, (3600 * young_children) - 0.05 * mod_income),
      
      # Single household, income > 200k, only young children
      marital_status == 0 & hh_income > 200000 & old_children == 0 & young_children >= 1 ~ 
        pmax(0, (3600 * young_children) - 0.05 * mod_income),
      
      # Married couple, income < 400k, older and young children
      marital_status == 1 & hh_income < 400000 & old_children >= 1 & young_children >= 1 ~
        pmax(2000, ((3000 * old_children) + (3600 * young_children)) - 0.05 * mod_income),
      
      # Married couple, income > 400k, older and young children
      marital_status == 1 & hh_income > 400000 & old_children >= 1 & young_children >= 1 ~
        pmax(0, ((3000 * old_children) + (3600 * young_children)) - 0.05 * mod_income),
      
      # Single couple, income < 200k, older and young children
      marital_status == 0 & hh_income < 200000 & old_children >= 1 & young_children >= 1 ~
        pmax(2000, ((3000 * old_children) + (3600 * young_children)) - 0.05 * mod_income),
      
      # Single couple, income > 200k, older and young children
      marital_status == 0  & hh_income > 200000 & old_children >= 1 & young_children >= 1 ~
        pmax(0, ((3000 * old_children) + (3600 * young_children)) - 0.05 * mod_income),
      
      TRUE ~ 0)
  
  return(benefit)
  
}

```

**Applying the ARPA policy proposal**

```{r}

# Proposal
asec_arpa <-
  asec_2022 %>% 
  select(hh_income, marital_status, young_children, old_children)
  
arpa_credit <-
  asec_arpa %>%
  mutate(
    benefit = pmap_dbl(asec_arpa, arpa_tax_credit))

```

**Accounting rules for the NON expanded Child Tax Credit**

Maximum credit:

-   \$2000 per qualifying child

Phase-out levels:

1.  The available tax credit is reduced by \$50 per \$1000 above the threshold outlined below:

-   \$400,000 for married couples filing a joint return

-   \$200,000 for all other filers

**Assumptions:**

1.  Ignore the first \$200,000 of family income if there is a single parent and ignore the first \$400,000 if there are (2) parents.
2.  Create a maximum benefit of \$2000 for all children
3.  Reduce the benefit by \$50 for every \$1000 of income in excess of \$200,000 for single households and the same in excess of \$400,000 for two-parent households.

**Calculator function - Normal Child Tax Credit**

```{r}

#' Calculating the total child tax credit benefit for families under the American Rescue Plan Act's expanded child tax credit
#'
#' @param hh_income Numeric total of family income in a year
#' @param marital_status Binary variable for if parents are married or not
#' @param tot_children Number of qualifying children
#'
#' @return Numeric benefit in dollars
#'

child_tax_credit <- function(hh_income, marital_status, tot_children){
  
  # Assumption: Maximum income for full benefit = $200,000 if one head of household OR $400,000 if married household
  
  mod_income <- 
    if_else(
      condition = marital_status == 1,
      true = pmax(hh_income - 400000, 0),
      false = pmax(hh_income - 200000, 0))
  
  # Benefit per child
  
  benefit <- 
    
    case_when(
      
      # Married couple
      marital_status == 1 ~ pmax(0, (2000 * tot_children) - 0.05 * mod_income),
      
      # Single household
      marital_status == 0 ~ pmax(0, (2000 * tot_children) - 0.05 * mod_income),
      
      TRUE ~ 0)
  
  return(benefit)
  
}

```

**Applying the normal child tax credit**

```{r}
# Normal proposal 

asec_ctc <-
  asec_2022 %>% 
  select(marital_status, hh_income, tot_children)

normal_ctc <-
  asec_ctc %>% 
  mutate(
    benefit = pmap_dbl(asec_ctc, child_tax_credit))

```

**Distributional analysis**

```{r}
normal_ctc <-
  normal_ctc %>% 
  mutate(
    credit = "normal_ctc")

arpa_credit <-
  arpa_credit %>% 
  mutate(
    credit = "arpa_ctc")

credits_combined <-
  bind_rows(normal_ctc, arpa_credit)

credits_combined %>% 
  
  summarize(
    mean_benefit = mean(benefit),
    .by = credit) %>% 
  
  ggplot() +
  geom_col(
    aes(x = credit,
        y = mean_benefit),
    fill = "light green") +
  
  labs(
    title = "Estimating mean benefit of federal child tax credit",
    subtitle = "Comparing the expanded CTC versus the normal CTC",
    x = "Credit type",
    y = "Mean benefit")

```

## Machine Learning Model

\*\* Data pre-processing \*\*

Pre-processing ASEC data

```{r}

# Appending data, adding benefit to total income

asec_mod_inc <-
  
  bind_cols(
    asec_2022, 
    arpa_credit$benefit, 
    normal_ctc$benefit) %>% 
  
  mutate(
    arpa_benefit = ...14,
    ctc_reg = ...15) %>% 
  
  select(
    arpa_benefit,
    ctc_reg,
    hh_income) %>% 
  
  mutate(
    arpa_tot_inc = hh_income + arpa_benefit,
    ctc_reg_tot_inc = hh_income + ctc_reg) %>% 
  
  select(
    arpa_tot_inc,
    ctc_reg_tot_inc,
    - hh_income)
  
# Appending back to original data set
asec_full <-
  bind_cols(
    asec_2022,
    asec_mod_inc)


# Refactoring data to match CPS structure

asec_refactored <-
  
  asec_full %>% 
  
  select(
    age,
    sex,
    race,
    emp_status,
    education,
    marital_status,
    hh_income,
    arpa_tot_inc,
    ctc_reg_tot_inc) %>% 
  
  # Refactoring income 
  
  mutate(
    
    hh_income =
      case_when(
        hh_income < 5000 ~ 1,
        hh_income <= 7499 ~ 2,
        hh_income <= 9999 ~ 3,
        hh_income <= 12499 ~ 4,
        hh_income <= 14999 ~ 5,
        hh_income <= 19999 ~ 6,
        hh_income <= 24999 ~ 7,
        hh_income <= 29999 ~ 8, 
        hh_income <= 34999 ~ 9,
        hh_income <= 39999 ~ 10,
        hh_income <= 49999 ~ 11,
        hh_income <= 59999 ~ 12,
        hh_income <= 74999 ~ 13,
        hh_income <= 99999 ~ 14,
        hh_income <= 149999 ~ 15,
        hh_income >= 150000 ~ 16),
    
    arpa_tot_inc =
      case_when(
        arpa_tot_inc < 5000 ~ 1,
        arpa_tot_inc <= 7499 ~ 2,
        arpa_tot_inc <= 9999 ~ 3,
        arpa_tot_inc <= 12499 ~ 4,
        arpa_tot_inc <= 14999 ~ 5,
        arpa_tot_inc <= 19999 ~ 6,
        arpa_tot_inc <= 24999 ~ 7,
        arpa_tot_inc <= 29999 ~ 8, 
        arpa_tot_inc <= 34999 ~ 9,
        arpa_tot_inc <= 39999 ~ 10,
        arpa_tot_inc <= 49999 ~ 11,
        arpa_tot_inc <= 59999 ~ 12,
        arpa_tot_inc <= 74999 ~ 13,
        arpa_tot_inc <= 99999 ~ 14,
        arpa_tot_inc <= 149999 ~ 15,
        arpa_tot_inc >= 150000 ~ 16),
    
    ctc_reg_tot_inc =
      case_when(
        ctc_reg_tot_inc < 5000 ~ 1,
        ctc_reg_tot_inc <= 7499 ~ 2,
        ctc_reg_tot_inc <= 9999 ~ 3,
        ctc_reg_tot_inc <= 12499 ~ 4,
        ctc_reg_tot_inc <= 14999 ~ 5,
        ctc_reg_tot_inc <= 19999 ~ 6,
        ctc_reg_tot_inc <= 24999 ~ 7,
        ctc_reg_tot_inc <= 29999 ~ 8, 
        ctc_reg_tot_inc <= 34999 ~ 9,
        ctc_reg_tot_inc <= 39999 ~ 10,
        ctc_reg_tot_inc <= 49999 ~ 11,
        ctc_reg_tot_inc <= 59999 ~ 12,
        ctc_reg_tot_inc <= 74999 ~ 13,
        ctc_reg_tot_inc <= 99999 ~ 14,
        ctc_reg_tot_inc <= 149999 ~ 15,
        ctc_reg_tot_inc >= 150000 ~ 16)) %>% 
  
  # Refactoring education (1 = no hs degree, 2 = hs diploma, 3 = some college,
  # 4 = bachelor's, 5 = higher degree)
  
  mutate(
    education = 
      case_when(
        education <= 072 ~ 1,
        education == 73 ~ 2,
        education <= 110 ~ 3,
        education <= 122 ~ 4,
        education <= 125 ~ 5)) %>% 
  
  # Refactoring race (1 = White, 2 = Black, 3 = American indian, 4 = Asian, 5 = 2 or more races and other)
  
  mutate(
    race = 
      case_when(
        race == 100 ~ 1,
        race == 200 ~ 2,
        race == 300 ~ 3,
        race == 650 ~ 4,
        race == 651 ~ 4,
        race == 652 ~ 4, 
        race > 660 ~ 5)) %>% 
  
  # Refactoring employment (1 = employed, 2 = unemployed)
  
  mutate(
    emp_status =
      case_when(
        emp_status == 01 ~ 1,
        emp_status == 02 ~ 1,
        emp_status == 10 ~ 1,
        emp_status == 12 ~ 1,
        emp_status <= 36 ~ 0))
  
  
```

Reading in the CPS Voting Supplement Data

```{r, output = FALSE}
cps <- read_csv(here("data/cps_supp.csv")) %>% 
  
  select(
    PRTAGE,
    PEEDUCA,
    PEMARITL,
    PESEX,
    PEMLR,
    PTDTRACE,
    HEFAMINC,
    PES2,
    PES1) %>% 
  
  mutate(
    education = PEEDUCA,
    age = PRTAGE,
    marital_status = PEMARITL,
    sex = PESEX,
    emp_status = PEMLR,
    race = PTDTRACE,
    hh_income = HEFAMINC,
    voted = PES1) %>%
  
  filter(
    !education == -1,
    !age < 0,
    !marital_status == -1,
    !emp_status == -1,
    !race == -1,
    !hh_income == -1,
    !voted < 0) %>% 
  
  select(
    age,
    sex,
    race,
    education,
    marital_status,
    emp_status,
    hh_income,
    voted) %>% 
  
   # Refactoring education (1 = no hs degree, 2 = hs diploma, 3 = some college, # 4 = bachelor's, 5 = higher degree)
  
  mutate(
    education = 
      case_when(
        education <= 38 ~ 1,
        education == 39 ~ 2,
        education <= 42 ~ 3,
        education == 43 ~ 4,
        education <= 46 ~ 5)) %>% 

  # Refactoring race (1 = White, 2 = Black, 3 = American indian, 4 = Asian, 5 = 2 or more races and other)
  
  mutate(
    race = 
      case_when(
        race == 01 ~ 1,
        race == 02 ~ 2,
        race == 03 ~ 3,
        race == 04 ~ 4,
        race == 05 ~ 4,
        race <= 26 ~ 5)) %>% 
  
  # Refactoring employment (1 = employed, 2 = unemployed)
  
  mutate(
    emp_status =
      case_when(
        emp_status == 1 ~ 1,
        emp_status == 2 ~ 1,
        emp_status <= 7 ~ 0))
  

```

Exploratory Data Analysis - Voter turnout rate by income level

```{r}

# Voter turnout rate by income level

voter_turnout <-
  
  cps %>% 
  
  mutate(
    inc_grouped = 
      case_when(
        fam_inc <= 7 ~ "$25,000 or less",
        fam_inc <= 11 ~ "$25,000 - $50,000",
        fam_inc <= 13 ~ "$50,000 - $75,000",
        fam_inc == 14 ~ "$75,000 - $100,000",
        fam_inc <= 16 ~ "$150,000 +")) %>%
  
  summarize(
    total_votes = n(),
    .by = c(voted, inc_grouped)) %>% 
  
  arrange(inc_grouped) %>% 
  
  pivot_wider(
    values_from = total_votes,
    names_from = voted) %>% 
  
  mutate(
    voted = `1`,
    no_vote = `2`) %>% 
  
  select(
    inc_grouped,
    voted,
    no_vote) %>% 
  
  mutate(
    total_pop = voted + no_vote,
    turnout_rate = voted / total_pop) %>% 
  
  mutate(
    inc_grouped = fct_reorder(inc_grouped, turnout_rate, .desc = FALSE))

voter_turnout %>% 
  
  ggplot() +
  
  geom_col(
    aes(
      x = inc_grouped, 
      y = turnout_rate),
    fill = "blue") +
  
  labs(
    title = "Voter Turnout Rate by Income Level",
    x = "Income Level",
    y = "Voter Turnout Rate")

```

Exploratory data analysis - Mean income under each policy

```{r}
asec_full %>% 
  
  summarize(
    avg_none = mean(hh_income),
    avg_ctc = mean(ctc_reg_tot_inc),
    avg_arpa = mean(arpa_tot_inc)) %>% 
  
  pivot_longer(
    cols = c("avg_none", "avg_ctc", "avg_arpa")) %>% 
  
  mutate(
    policy = name,
    avg_inc = value) %>% 
  
  select(
    policy,
    avg_inc) %>% 
  
  kableExtra::kable()
```

# ML model

First, we create the shift in probability variables and merge them with CPS

```{r}
asec_summary <- 
  asec_refactored %>%
  reframe(
    Proportion_No_CTC = (table(factor(no_ctc_inc, levels = 1:16)) / n())*100,
    Proportion_ARPA = (table(factor(arpa_tot_inc, levels = 1:16)) / n())*100,
    Proportion_CTC = (table(factor(ctc_reg_tot_inc, levels = 1:16)) / n())*100) %>% 
  mutate(
    Shift_Probability_ARPA = Proportion_ARPA - Proportion_No_CTC,
    Shift_Probability_CTC = Proportion_CTC - Proportion_No_CTC)

cps_ml <- cps %>%
  mutate(
    income_category_shift_ARPA = as.factor(asec_summary$Shift_Probability_ARPA[fam_inc]),
    income_category_shift_CTC = as.factor(asec_summary$Shift_Probability_CTC[fam_inc]),
    voted = as.factor(voted)
  ) %>%
  select(education, marital_status, emp_status, race, income_category_shift_ARPA, voted, income_category_shift_CTC)

```

Machine Learning - MODEL ONE (Estimating impact of ARPA CTC on voter turnout)

Data Prepping - ARPA CTC Model

```{r}
arpa_cps_data <-
  cps_ml %>% 
  select(-income_category_shift_CTC)

# Set seed 
set.seed(20231214)

# Create an 80-20 split object
arpa_cps_split <- initial_split(data = arpa_cps_data, prop = 0.8)

# Create the training (80%) and testing (20%) data
arpa_cps_train <- training(arpa_cps_split)
arpa_cps_test  <- testing(arpa_cps_split)

```

Logistic Regression Model

```{r}
# Logistic regression recipe
logistic_recipe <- 
  recipe(voted ~ ., data = arpa_cps_train) %>%
  step_novel(all_nominal_predictors()) %>% 
  step_zv(all_predictors()) %>% 
  step_normalize(all_numeric_predictors())

# Logistic regression model specification
logistic_model <- 
  logistic_reg() %>% 
  set_engine("glm") %>% 
  set_mode("classification")

# Workflow
logistic_wf <- 
  workflow() %>% 
  add_recipe(logistic_recipe) %>% 
  add_model(logistic_model)

# Cross-validation on the training set
folds <- 
  vfold_cv(arpa_cps_train, v = 5, repeats = 2)

# Fit the model using cross-validation on the training set
logistic_resamples <- 
  logistic_wf %>% 
  fit_resamples(folds)

# Collect and check cross-validation results
logistic_resamples %>% 
  collect_metrics()

# Finalizing model 
logistic_best_arpa <-
  logistic_resamples %>% 
  select_best(metric = "accuracy")

# Final model selection
logistic_final_arpa <-
  logistic_model %>% 
  finalize_model(logistic_best_arpa)

# Final work flow
logistic_final_wf_arpa <-
  workflow() %>% 
  add_recipe(logistic_recipe) %>% 
  add_model(logistic_final_arpa)

# Fitting best model
logistic_final_arpa_fit <-
  logistic_final_wf_arpa %>% 
  fit(data = arpa_cps_train)

# Model predictions
logistic_arpa_predictions <-
  bind_cols(
    arpa_cps_train,
    predict(
      object = logistic_final_arpa_fit,
      new_data = arpa_cps_train))

# Results
conf_mat(
  data = logistic_arpa_predictions,
  truth = voted,
  estimate = .pred_class)

## TP = 27242 / TN = 10935 / FP = 4229 / FN = 6932
#Precision rate= [27242/(27242+4229)] = 0.86
#Recall rate=[27242/(27242+6932)] = 0.80

```

Data Prepping - Normal CTC Model

```{r}
ctc_cps_data <-
  cps_ml %>% 
  select(-income_category_shift_ARPA)

# Set seed 
set.seed(4323)

# Create an 80-20 split object
ctc_cps_split <- initial_split(data = ctc_cps_data, prop = 0.8)

# Create the training (80%) and testing (20%) data
ctc_cps_train <- training(ctc_cps_split)
ctc_cps_test  <- testing(ctc_cps_split)

```
Logistic regression with CTC

```{r}

# Logistic regression recipe
logistic_recipe_ctc <- 
  recipe(voted ~ ., data = ctc_cps_train) %>%
  step_novel(all_nominal_predictors()) %>% 
  step_zv(all_predictors()) %>% 
  step_normalize(all_numeric_predictors())

# Logistic regression model specification
logistic_model_ctc <- 
  logistic_reg() %>% 
  set_engine("glm") %>% 
  set_mode("classification")

# Workflow
logistic_wf_ctc <- 
  workflow() %>% 
  add_recipe(logistic_recipe_ctc) %>% 
  add_model(logistic_model_ctc)

# Cross-validation on the training set
foldsB <- 
  vfold_cv(ctc_cps_train, v = 5, repeats = 2)

# Fit the model using cross-validation on the training set
logistic_resamples_ctc <- 
  logistic_wf_ctc %>% 
  fit_resamples(foldsB)

# Collect and check cross-validation results
logistic_resamples_ctc %>% 
  collect_metrics()

# Finalizing model 
logistic_best_ctc <-
  logistic_resamples_ctc %>% 
  select_best(metric = "accuracy")

# Final model selection
logistic_final_ctc <-
  logistic_model_ctc %>% 
  finalize_model(logistic_best_ctc)

# Final work flow
logistic_final_wf_ctc <-
  workflow() %>% 
  add_recipe(logistic_recipe_ctc) %>% 
  add_model(logistic_final_ctc)

# Fitting best model
logistic_final_ctc_fit <-
  logistic_final_wf_ctc %>% 
  fit(data = ctc_cps_train)

# Model predictions
logistic_ctc_predictions <-
  bind_cols(
    ctc_cps_train,
    predict(
      object = logistic_final_ctc_fit,
      new_data = ctc_cps_train))

# Results
conf_mat(
  data = logistic_ctc_predictions,
  truth = voted,
  estimate = .pred_class)

## TP = 7112 / TN = 27050 / FP = 4298 / FN = 10878
#Precision rate= [27242/(27242+4229)] = 0.86
#Recall rate=[27242/(27242+6932)] = 0.80

```

Model fit under ARPA CTC (Expanded CTC)

```{r}
vote_predictions_arpa <-
  bind_cols(
    arpa_cps_test,
    predict(
      object = logistic_final_arpa_fit,
      new_data = arpa_cps_test))
```

Model fit under Normal CTC (Non expanded CTC)

```{r}
vote_predictions_ctc <-
  bind_cols(
    ctc_cps_test,
    predict(
      object = logistic_final_ctc_fit,
      new_data = ctc_cps_test))
```

Federal Voter Turnout Rate Estimations

```{r}

# Expected voter turnout rate - ARPA

vote_predictions_arpa %>% 
  
  select(.pred_class) %>% 
  rename(vote_pred = .pred_class) %>%
  mutate(vote_pred = as.numeric(vote_pred)) %>% 
  
  summarize(
    total_votes = n(),
    .by = vote_pred) %>% 
  
  pivot_wider(
    values_from = total_votes,
    names_from = vote_pred) %>% 
  
  rename(
    voted = `1`,
    no_vote = `2`) %>%
  
  summarize(
    turnout_rate_arpa = voted / (voted + no_vote))


# Expected voter turnout rate - CTC

vote_predictions_ctc %>% 
  select(.pred_class) %>% 
  rename(vote_pred = .pred_class) %>%
  mutate(vote_pred = as.numeric(vote_pred)) %>% 
  
  summarize(
    total_votes = n(),
    .by = vote_pred) %>% 
  
  pivot_wider(
    values_from = total_votes,
    names_from = vote_pred) %>% 
  
  rename(
    voted = `1`,
    no_vote = `2`) %>%
  
  summarize(
    turnout_rate_ctc = voted / (voted + no_vote))

# Voter turnout rate (no CTC)

cps %>% 
  
  summarize(
    total_votes = n(),
    .by = voted) %>% 
  
  pivot_wider(
    values_from = total_votes,
    names_from = voted) %>% 
  
  rename(
    voted = `1`,
    no_vote = `2`) %>%
  
  summarize(
    turnout_rate_none = voted / (voted + no_vote))

```
